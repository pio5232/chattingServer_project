-----------------------
서버
{
기본 -> uPtr로 설정
	<설정>
	<Log 클래스> => 모든 작업 후에는 로그를 남긴다. 텍스트를 파일에 저장하는 형태도 나쁘지 않음.
	
	<네트워크 연결 및 전송 클래스>
	<네트워크 패킷 처리 클래스>
	<User (Session으로 보임.) 관리 Manager>
	<Room 관리 Manager>
}


--------
설정 구조체
=> ip, 포트, backLogQ Count, MaxClient, MaxRoomCount, send/recvBufferSize 등.
서버 세팅에 필요한 값들은 여기다 추가한다.

--------
Log클래스
=> 간단히 디버깅 창에 콘솔을 출력. 에러 타입을 여러개 나눠서 타입에 따른 에러를 출력할 수 있도록 한다.

--------

네트워크 연결 및 전송 클래스 중 
ServerNetErrorCode.h
=> 또한 많은 네트워크 에러 코드를 정의하고 있으면서. 에러가 발생하면 네트워크 에러 값을 담은 구조체를 리턴. (NetError 구조체 및 Enum _ NET_ERROR_CODE

TcpNetwork 및 ITcpNetWork 파일
=>  기본적인 네트워크 통신에 관한 정의 / 연결 세션에 대한 관리를 여기서 한다. / 클라이언트 세션에 대한 풀을 미리 만들어놓고 이용 가능한 세션 인덱스에 대한 보관을 Deque(index) , vector(session)에 대한 형태로 보관중.
/ 현재는 멀티 스레드로 처리하는 형태가 아니기 때문에 (싱글 스레드 select 방식으로 ..) => 모든 소켓을 select 돌리면서 recv완료된 세션에서 뽑은 메시지를 messageQ에 넣는다.
이렇게 messageQ에 들어간 메시지들은 메인 스레드


여기 select는 ㅁㅇ